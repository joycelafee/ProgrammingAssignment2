available.packages()
a <- available.packages()
head(rownames(a),3)
clc
clear
install.packages("KernSmooth")
install.packages(KernSmooth)
install.packages(ggplot2)
install.packages("KernSmooth")
library(KernSmooth)
q()
q()
q()
source("mycode.R")
dir()
getwd()
dir()
ls()
myfunction <- function() {
x <- rnorm(100)
mean(x)
}
myfunction()
print(x) #this is okay
x
x<-1
print(x)
print(x)
ls()
clc
clear
x
1/inf
1/Inf
x <- 0:6
x
class(x)
as.numeric(x)
class(x)
as.string(x)
as.text(x)
as.charater(x)
as.character(x)
as.logical(x)
x <- list(1, "a", TRUE, 1+4i)
x
q()
cl
clear
clean
pwd
clear
ls
if (x>3) {
y <- 10
}else{
y <- 0
}
x=4
y
x=2
y
x
if (x>3){
y<-10
}else{
y<-0
}
y
x=4
x
if (x>3)}
if (x>3){
y<-10
}else{
y<-0
}
y
ls
q()
add2 <- function(x,y) {
x + y
}
add2 <- function(x,y) {
x + y
}
add2 <- function(x,y) {
+   x + y
+ }
add2 <- function(x,y) {
x + y
}
add2(8,10)
add
above10 <- function(x) {
use <- x > 10
x[use]
}
above10 <- function(x) {
use <- x > 10
x[use]
}
above10(15)
above10(5)
above10(10)
above10(11)
y <- [1,2,3]
y
y <- (1:10)
y
ncol(y)
nrow(y)
help(ncol)
y <- matrix(1:12,3,4)
y
ncol(y)
nrow(y)
clear
clc
formals
formals(above10)
formals(ncol)
formals(nrow)
rnorm(100)
mydata <- rnorm(100)
mydata
sd(mydata)
help(sd)
formals(sd)
help(above10)
help(nrow)
help(sd)
formals(sd)
formals(lm)
formals(sd)
help(lm)
lm(data=mydata,formula=y-x,model=FALSE,subset=1:100)
formals(plot)
formals(plot.default)
formals(lm)
search(lm)
search9
search()
help(ls)
ls
help(params)
params
getwd()
setwd("C:/Users/admin/Documents/Coursera/Data Science/Course2/Week2/specdata")
getwd()
setwd("../")
getwd()
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
formals(dir.create)
formals(file.path)
?file.path
setwd("../")
dir.create("Week3")
dir()
setwd("./Week3")
getwd()
download.file(fileUrl,method="curl")
setwd("../")
download.file(fileUrl,destfile="./Week3",method="curl")
download.file(fileUrl,destfile="./Week3/cameras.csv",method="curl")
download.file(fileUrl,destfile="./Week3/cameras.csv",method="curl") list.files("./Week3")
fileUrl
> download.file(fileUrl,destfile="./Week3/cameras.csv",method="curl")
download.file(fileUrl,destfile="./data/cameras.csv",method="curl")
formals(download.file)
download.file(fileUrl,destfile="./Week3/cameras.csv",method="curl") list.files("./Week3")
download.file(fileUrl,destfile="./Week3/cameras.csv") list.files("./Week3")
download.file(fileUrl,destfile="./Week3/cameras.csv")
download.file(fileUrl,destfile="./Week3/cameras.csv")
list.files("./data")
list.files("./Week3")
dir()
dir("./Week3")
list.files("./Week3")
dateDownloaded <- date()
dateDownloaded
if (!file.exists("data")) {
dir.create("data")
}
dir()
formals(read.table)
cameraData <- read.table("./Week3/cameras.csv")
dir()
head(cameraData)
cameraData <- read.table("./Week3/cameras.csv",sep=",",header=TRUE)
head(cameraData)
getwd()
dir()
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./Week3/cameras.xlsx")
dateDownloaded <- date()
library(xlsx)
install.packages("xlsx",dependencies=TRUE)
library(xlsx)
camerasData <- read.xlsx("./Week3/cameras.xlsx",sheetIndex=1,header=TRUE)
cameraData
head(cameraData)
summary(cameraData)
cameraData <- read.xlsx("./Week3/cameras.xlsx",sheetIndex = 1,header=TRUE)
head(cameraData)
colIndex <- 2:3
rowIndex <- 1:4
cameraDataSubset <- read.xlsx("./Week3/cameras.xlsx",sheetIndex = 1,colIndex = colIndex,rowIndex = rowIndex)
cameraDataSubset
library(XML)
install.packages("XML")
library(XML)
rm(list=ls())
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
doc
doc <- xmlTreeParse(fileUrl,useInternalNodes = TRUE)
doc <- xmlTreeParse(fileUrl,...)
doc <- xmlTreeParse(fileUrl)
fileUrl
fileUrl
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
doc <- xmlTreeParse(fileUrl,useInternalNodes = TRUE)
fileUrl
doc <- xmlTreeParse(sub("s", "", fileURL), useInternal = TRUE)
doc <- xmlTreeParse(sub("s", "", fileUrl), useInternal = TRUE)
xData <- getURL(fileUrl)
geturl(fileUrl)
install.packages("RCurl")
xData <- getUrl(fileUrl)
getURL(fileUrl)
xData <- getURL(fileUrl, ssl.verifypeer = FALSE)
version(R)
R.version.string
library(XML)
fileUrl
doc <- xmlTreeParse(fileUrl,useInternalNodes = TRUE)
?xmlTreeParse
?useInternal
doc <- xmlTreeParse(sub("s","",fileUrl),useInternalNodes = TRUE)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(sub("s", "", fileURL), useInternal = TRUE)
doc <- xmlTreeParse(sub("s", "", fileUrl), useInternal = TRUE)
doc
doc2 <- xmlTreeParse(fileURL,useInternalNodes = TRUE)
fileURL
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc2 <- xmlTreeParse(fileURL,useInternalNodes = TRUE)
rootNode <- xmlRoot(doc)
xmlNames(rootNode)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,".//price",xmlValue)
fileUrl
fileURL
rm(list=ls())
?makeVector
x = numeric()
x
y <<- 3
dir()
ls()
rm(list=ls())
dir.create("Week3Assign")
setwd("./Week3Assign")
source("makeVector")
ls()
dir()
source("makeVector.R")
makeVector(5)
makeVector(1:10)
source("makeVector")
getwd()
dir()
source("makeVector.R")
makeVector(x)
makeVector(34)
source("cachemean.R")
cachemean(4)
return(x)
?return
xy <- 24
return(xy)
return (xy)
return ("xy")
rm (list=ls())
cachemean(34)
large <- function(a,b) {
if (a>b)
return(a)
else
return(b)
}
large(4,5)
large(4,5)
formals(return)
?getmean
X <- matrix(rnorm(25),5,5)
X
solve(X)
Y <- solve(X)
X * Y
X %*% Y
rm(list=ls())
source("cachemean.R")
source("makeVector.R")
makeVector(5)
$getmean
makeVector$getmean
> <<-
?<<-
help(<<-)
help("source")
help("<<-")
x <<- y
x <<- 3
rm(x)
source("makeCacheMatrix")
source("makeCacheMatrix.R")
makeCacheMatrix(H)
source("makeCacheMatrix.R")
makeCacheMatrix(H)
makeVector(5,6,7)
x <- c(3,4,5,6)
x
makeVector(x)
cachemean(x)
cachemean(makeVector)
search()
lm()
lm <- 5
lm
?lm
lm <- function {x*x}
lm <- function(x) {x*x}
lm(4)
search()
lm <-45
library(methods)
search
search()
make.power <- function(n) {}
make.power(5)
make.power <- function(n) {
pow <- function(x) {}
}
make.power <- function(n) {
pow <- function(x) {
x^n
}
}
make.power(3)
pow(3)
square <- make.power(3)
square (3)
setmean <- makeVector(5)
setmean(4)
m <- 5
setmean(m)
setmean(3,4,5,6)
a <- makeVector(1:10)
cachemean(a)
mean(1:10)
a$set(11:20)
a
rm(list=ls())
source("cachemean.R")
source("makeVector.R")
a <- makeVector(1:10)
a
a$getmean
a$set()
a$set(11:20)
cachemean(a)
a <- makeVector(1:10)
cachemean(a)
a$set(11:20)
cachemean(a)
a$getmean(11:20)
a$getmean
a$getmean()
vec <- makeVector(1:10)
vec
cachemean(vec)
vec$set()
vec$set1:3
vec$set(1:3)
cachemean(cec)
cachemean(vec)
vec$get()
vec$get(1:4)
vec$set(1:3)
vec$setmean(1:3)
vec$setmean(1:20)
vec$getmean
cachemean(vec)
vec$setmean(2)
cachemean(vec)
get$
}
vec$get()
vec$setmean(5)
vec$getmean()
vec$getmean
cachemean(vec)
vec$set()
vec$get()
vec
vec$set(1:20)
vec$get()
cachemean(vec)
vec$getmean()
rnorm(4)
x <- matrix(rnorm(9),3,3)
x
rm(list=ls())
source("cacheSolve.R")
source("makeCacheMatrix.R")
mat <- makeCacheMatrix(matrix(rnorm(9))3,3)
x <- matrix(rnorm(9)r,r)
x <- matrix(rnorm(9)3,3)
x <- matrix(rnorm(9),3,3)
mat <- makeCacheMatrix(matrix(rnorm(9),3,3))
x
mat <- makeCacheMatrix(x)
mat <- makeCacheMatrix(x)
source("makeCacheMatrix.R")
mat <- makeCacheMatrix(x)
mat
cacheSolve(mat)
solve(x)
mat$setinverse(matrix(rnorm(16),4,4))
cacheSolve(mat)
mat$get()
mat$getinverse()
mat$get()
mat$set(matrix(rnorm(25),5,5))
cacheSolve(mat)
$git clone https://github.com/joycelafee/ProgrammingAssignment2
git clone https://github.com/joycelafee/ProgrammingAssignment2
getwd()
dir()
setwd("./ProgrammingAssignment2")
source("cachematrix.R")
rm(list=ls())
source("cachematrix.R")
vec <- makeCacheMatrix(matrix(rnorm(9),3,3))
vec$get()
vec$getinverse()
vec$getinverse(])
vec$getinverse()
cachematrix(vec)
cacheSolve(vec)
vec$getinverse
vec$getinverse()
vec
